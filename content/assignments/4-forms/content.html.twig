<p>
    You will create at least one form for your application that accepts user data.
</p>

<p>
    To begin, decide which of your entity classes your users will be inputting data for in your form(s).
</p>

<p>
    Create a new page for each form that you wish to create, and create the form using HTML.
</p>

<p>
    Create the form processing code on the same page as the form.  The form should be recursive, meaning
    that the same file both prints and processes the form.  See the instructor's <a href='https://bitbucket.org/fsulis4368/lis4368-fall-2013/src' title='Bitbucket Code'>code in Bitbucket</a> for
    an example of this.
</p>

<p>
    Provide validation for length of fields and which fields are required.  Use functions for your validation.
    See the instructor's <a href='https://bitbucket.org/fsulis4368/lis4368-fall-2013/src' title='Bitbucket Code'>code in Bitbucket</a> for an exmaple of this.
</p>

<p>
    If validation fails (not all form entries are correct), then re-print the form and display appropriate error messages.
</p>

<p>
    If validation succeeds, then create an entity object using the data that the user entered into the form.  Then, print out
    a success message using valid HTML.  The success message must contain at least some of the data that the user entered into
    the form.
</p>

<h4>Extra Credit</h4>

<p>Create more than one form.  All forms must conform to the specications provided above.</p>

<p>
    Create additional validation checks.  Bonus points if you use
    <a href='http://www.phpro.org/tutorials/Introduction-to-PHP-Regex.html' title='Tutorial'>regular expressions</a>.
</p>